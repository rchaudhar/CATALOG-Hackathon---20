import hashlib
import time
class Block:
    def __init__(self, index, previous_hash, timestamp, data, hash):
        self.index = index
        self.previous_hash = previous_hash
        self.timestamp = timestamp
        self.data = data
        self.hash = hash
class Blockchain:
    def __init__(self):
        self.chain = [self.create_genesis_block()]
    def create_genesis_block(self):
        return Block(0, "0", time.time(), "Genesis Block", self.calculate_hash(0, "0", time.time(), "Genesis Block"))
    def get_latest_block(self):
        return self.chain[-1]
    def calculate_hash(self, index, previous_hash, timestamp, data):
        value = f'{index}{previous_hash}{timestamp}{data}'.encode('utf-8')
        return hashlib.sha256(value).hexdigest()
    def add_block(self, data):
        previous_block = self.get_latest_block()
        index = previous_block.index + 1
        timestamp = time.time()
        hash = self.calculate_hash(index, previous_block.hash, timestamp, data)
        new_block = Block(index, previous_block.hash, timestamp, data, hash)
        self.chain.append(new_block)
    def is_chain_valid(self):
        for i in range(1, len(self.chain)):
            current_block = self.chain[i]
            previous_block = self.chain[i - 1]
            if current_block.hash != self.calculate_hash(current_block.index, current_block.previous_hash, current_block.timestamp, current_block.data):
                return False
            if current_block.previous_hash != previous_block.hash:
                return False
        return True
    def print_chain(self):
        for block in self.chain:
            print(f'Index: {block.index}')
            print(f'Previous Hash: {block.previous_hash}')
            print(f'Timestamp: {time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime(block.timestamp))}')
            print(f'Data: {block.data}')
            print(f'Hash: {block.hash}')
            print('-' * 50)
def main():
    supply_chain = Blockchain()
    print("Enter supply chain transactions (type 'exit' to finish):")
    while True:
        data = input("Enter transaction details: ")
        if data.lower() == 'exit':
            break
        supply_chain.add_block(data)
    print("\nBlockchain:")
    supply_chain.print_chain()
    is_valid = supply_chain.is_chain_valid()
    print(f'Blockchain is {"valid" if is_valid else "invalid"}')
if __name__ == "__main__":
    main()
